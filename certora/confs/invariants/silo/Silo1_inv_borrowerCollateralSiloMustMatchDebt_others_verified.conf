{
    "build_cache": true,
    "files": [
        "certora/harnesses/Config.sol",
        "certora/mocks/HelperCVL.sol",
        "certora/harnesses/silo0/Silo0.sol",
        "certora/harnesses/silo0/Debt0.sol",
        "certora/harnesses/silo0/Protected0.sol",
        "certora/mocks/Token0.sol",
        "certora/harnesses/silo1/Silo1.sol",
        "certora/harnesses/silo1/Debt1.sol",
        "certora/harnesses/silo1/Protected1.sol",
        "certora/mocks/Token1.sol"
    ],
    "link": [
        "Config:_SILO0=Silo0",
        "Config:_TOKEN0=Token0",
        "Config:_PROTECTED_COLLATERAL_SHARE_TOKEN0=Protected0",
        "Config:_COLLATERAL_SHARE_TOKEN0=Silo0",
        "Config:_DEBT_SHARE_TOKEN0=Debt0",
        "Config:_SILO_MODE=Silo1",
        "Config:_SILO1=Silo1",
        "Config:_TOKEN1=Token1",
        "Config:_PROTECTED_COLLATERAL_SHARE_TOKEN1=Protected1",
        "Config:_COLLATERAL_SHARE_TOKEN1=Silo1",
        "Config:_DEBT_SHARE_TOKEN1=Debt1"
    ],
    "msg": "Silo1_inv_borrowerCollateralSiloMustMatchDebt_others_verified",
    "method": "accrueInterestForConfig(address,uint256,uint256),approve(address,uint256),flashFee(address,uint256),transfer(address,uint256),totalAssets(),getCollateralAndProtectedTotalsStorage(),getDebtAssets(),silo(),updateHooks(),accrueInterest(),getCollateralAssets(),switchCollateralToThisSilo(),utilizationData(),config(),withdrawFees(),getCollateralAndDebtTotalsStorage(),asset(),hookSetup(),getLiquidity(),previewRepayShares(uint256),previewRepay(uint256),previewBorrowShares(uint256),previewBorrow(uint256),synchronizeHooks(uint24,uint24),flashLoan(address,address,uint256,bytes),maxRepayShares(address),balanceOfAndTotalSupply(address),maxWithdraw(address),maxMint(address),maxBorrow(address),balanceOf(address),maxFlashLoan(address),maxRepay(address),maxBorrowSameAsset(address),maxBorrowShares(address),maxDeposit(address),isSolvent(address),deposit(uint256,address),repayShares(uint256,address),repay(uint256,address),convertToSharesCollateral(uint256),convertToSharesProtected(uint256),convertToAssetsCollateral(uint256),convertToAssetsProtected(uint256),maxRedeemCollateral(address),maxRedeemProtected(address),maxWithdrawCollateral(address),maxWithdrawProtected(address),depositCollateral(uint256,address),depositProtected(uint256,address),mintCollateral(uint256,address),mintProtected(uint256,address),previewMintCollateral(uint256),previewMintProtected(uint256),previewRedeemCollateral(uint256),previewRedeemProtected(uint256),previewDepositCollateral(uint256),previewDepositProtected(uint256),previewWithdrawCollateral(uint256),previewWithdrawProtected(uint256),transferFrom(address,address,uint256),burn(address,address,uint256),forwardTransferFromNoChecks(address,address,uint256),mint(address,address,uint256)",
    "mutations": {
        "manual_mutants": [
            {
                "file_to_mutate": "silo-core/contracts/Silo.sol",
                "mutants_location": "certora/mutations/Silo"
            },
            {
                "file_to_mutate": "silo-core/contracts/lib/Actions.sol",
                "mutants_location": "certora/mutations/Actions"
            }
        ]
    },
    "optimistic_loop": true,
    "packages": [
        "openzeppelin5/=gitmodules/openzeppelin-contracts-5/contracts",
        "openzeppelin5-upgradeable/=gitmodules/openzeppelin-contracts-upgradeable-5/contracts",
        "@openzeppelin/contracts/=gitmodules/openzeppelin-contracts-5/contracts"
    ],
    "parametric_contracts": [
        "Silo1"
    ],
    "rule": [
        "inv_borrowerCollateralSiloMustMatchDebt"
    ],
    "struct_link": [
        "Silo0:silo=Silo0",
        "Debt0:silo=Silo0",
        "Protected0:silo=Silo0",
        "Silo0:siloConfig=Config",
        "Debt0:siloConfig=Config",
        "Protected0:siloConfig=Config",
        "Silo1:silo=Silo1",
        "Debt1:silo=Silo1",
        "Protected1:silo=Silo1",
        "Silo1:siloConfig=Config",
        "Debt1:siloConfig=Config",
        "Protected1:siloConfig=Config"
    ],
    "verify": "Silo1:certora/specs/invariants.spec"
}